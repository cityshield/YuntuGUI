name: 🪟 Build Windows Qt 6.5 (Fallback)

on:
  workflow_dispatch:  # 手动触发
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/**'

env:
  QT_VERSION: 6.5.3
  CMAKE_VERSION: 3.21.0
  BUILD_TYPE: Release

jobs:
  build-qt65:
    runs-on: windows-2022
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
    
    - name: 🔧 设置 MSVC 环境
      uses: microsoft/setup-msbuild@v1.3
    
    - name: 📦 安装 Qt 6.5.3
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        host: windows
        target: desktop
        arch: win64_msvc2019_64
        modules: 'qtbase qttools qt5compat'
        cache: true
    
    - name: 🔧 设置 CMake
      uses: jwlawson/actions-setup-cmake@v1.14
      with:
        cmake-version: '3.21.0'
    
    - name: 🔍 验证环境
      run: |
        echo "=== Qt 信息 ==="
        qmake --version
        echo "Qt 路径: $env:Qt6_DIR"
        
        echo "=== CMake 信息 ==="
        cmake --version
        
        echo "=== 编译器信息 ==="
        cl 2>&1 | Select-String "Microsoft"
    
    - name: ⚙️ 配置项目
      run: |
        mkdir build
        cd build
        
        # 使用兼容的 CMake 配置
        cmake .. -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_PREFIX_PATH="$env:Qt6_DIR" `
          -DQt6_DIR="$env:Qt6_DIR"
    
    - name: 🔨 编译项目
      run: |
        cd build
        cmake --build . --config Release --parallel 4
    
    - name: 📦 部署 Qt 库
      run: |
        cd build/Release
        
        # 检查可执行文件
        if (Test-Path "MyApp.exe") {
          echo "✅ 找到可执行文件"
          
          # 部署 Qt 依赖
          windeployqt MyApp.exe --no-translations --no-system-d3d-compiler
          
          # 显示文件列表
          echo "=== 部署后的文件 ==="
          Get-ChildItem -Name
          
        } else {
          echo "❌ 找不到 MyApp.exe"
          echo "=== 构建目录内容 ==="
          Get-ChildItem -Recurse
          exit 1
        }
    
    - name: 🎯 测试应用程序
      run: |
        cd build/Release
        
        # 检查 DLL 依赖
        echo "=== 检查 DLL 依赖 ==="
        dumpbin /dependents MyApp.exe | Select-String "\.dll"
        
        # 检查文件大小
        $size = (Get-Item "MyApp.exe").Length / 1MB
        echo "📊 应用程序大小: $([math]::Round($size, 2)) MB"
    
    - name: 📦 打包发布
      run: |
        # 创建发布包
        $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
        $packageName = "QtShadcnAuth-Windows-Qt6.5-$timestamp"
        
        mkdir $packageName
        Copy-Item -Recurse "build/Release/*" "$packageName/"
        
        # 添加说明文件
        @"
        Qt Shadcn/UI 认证界面 - Windows 版本
        
        构建信息:
        - Qt 版本: 6.5.3
        - 构建时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
        - 提交哈希: $env:GITHUB_SHA
        
        运行说明:
        1. 双击 MyApp.exe 启动程序
        2. 界面尺寸: 900x600 像素
        3. 支持手机号登录和微信扫码登录
        
        系统要求:
        - Windows 10 或更高版本
        - 支持的分辨率: 1024x768 或更高
        "@ > "$packageName/README.txt"
        
        # 创建压缩包
        Compress-Archive -Path "$packageName/*" -DestinationPath "$packageName.zip"
        
        echo "PACKAGE_NAME=$packageName" >> $env:GITHUB_ENV
    
    - name: 📤 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{ env.PACKAGE_NAME }}.zip
        retention-days: 7
    
    - name: 📋 构建报告
      if: always()
      run: |
        echo "## 🎯 Qt 6.5 构建报告" >> $env:GITHUB_STEP_SUMMARY
        echo "" >> $env:GITHUB_STEP_SUMMARY
        
        if (Test-Path "build/Release/MyApp.exe") {
          echo "✅ **构建成功**" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          
          $size = (Get-Item "build/Release/MyApp.exe").Length
          echo "📊 **应用程序大小**: $([math]::Round($size / 1MB, 2)) MB" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "🎉 **Qt Shadcn/UI 认证界面编译完成！**" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "📦 **下载**: 在 Actions 页面的 Artifacts 中下载 $env:PACKAGE_NAME.zip" >> $env:GITHUB_STEP_SUMMARY
          
        } else {
          echo "❌ **构建失败**" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "请检查构建日志获取详细信息。" >> $env:GITHUB_STEP_SUMMARY
        }
        
        echo "" >> $env:GITHUB_STEP_SUMMARY
        echo "### 📋 构建配置" >> $env:GITHUB_STEP_SUMMARY
        echo "- Qt: 6.5.3" >> $env:GITHUB_STEP_SUMMARY
        echo "- CMake: 3.21.0" >> $env:GITHUB_STEP_SUMMARY
        echo "- 编译器: MSVC 2022" >> $env:GITHUB_STEP_SUMMARY
        echo "- 平台: Windows x64" >> $env:GITHUB_STEP_SUMMARY
